<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
    var names = new []{ "Single", "Double", "Decimal" };
    var words = new []{ "float",  "double", "decimal" };
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Opportunity.Converters.XBind
{
<#
    for(var i = 0; i < names.Length; i++)
    {
        var name = names[i];
        var type = words[i];

#>
    /// <summary>
    /// Method of <see cref="<#=type#>"/> conversion.
    /// </summary>
    public static partial class <#=name#>
    {
        /// <summary>
        /// Add 1 to <paramref name="value"/>.
        /// </summary>
        public static <#=type#> Increase(<#=type#> value) => (<#=type#>)(value + 1);
        /// <summary>
        /// Subtract 1 from <paramref name="value"/>.
        /// </summary>
        public static <#=type#> Decrease(<#=type#> value) => (<#=type#>)(value - 1);
        /// <summary>
        /// Add <paramref name="addition"/> to <paramref name="value"/>.
        /// </summary>
        public static <#=type#> Add(<#=type#> value, <#=type#> addition) => value + addition;
        /// <summary>
        /// Subtract <paramref name="subtraction"/> from <paramref name="value"/>.
        /// </summary>
        public static <#=type#> Subtract(<#=type#> value, <#=type#> subtraction) => value - subtraction;
        
        /// <summary>
        /// Add <paramref name="addition"/> to <paramref name="value"/> and to string.
        /// </summary>
        public static string AddToString(<#=type#> value, <#=type#> addition) => Add(value, addition).ToString();
        /// <summary>
        /// Subtract <paramref name="subtraction"/> from <paramref name="value"/> and to string.
        /// </summary>
        public static string SubtractToString(<#=type#> value, <#=type#> subtraction) => Subtract(value, subtraction).ToString();
        /// <summary>
        /// Add 1 to <paramref name="value"/> and to string.
        /// </summary>
        public static string IncreaseToString(<#=type#> value) => Increase(value).ToString();
        /// <summary>
        /// Subtract 1 from <paramref name="value"/> and to string.
        /// </summary>
        public static string DecreaseToString(<#=type#> value) => Decrease(value).ToString();
        
        /// <summary>
        /// Test <paramref name="value"/> is 0 or not.
        /// </summary>
        public static bool IsZero(<#=type#> value) => value == 0;
        /// <summary>
        /// Test <paramref name="value"/> is 0 or not.
        /// </summary>
        public static bool IsNotZero(<#=type#> value) => value != 0;
        /// <summary>
        /// Test <paramref name="value1"/> equals <paramref name="value2"/> or not.
        /// </summary>
        public static bool AreEqual(<#=type#> value1, <#=type#> value2) => value1 == value2;
        /// <summary>
        /// Test <paramref name="value1"/> equals <paramref name="value2"/> or not.
        /// </summary>
        public static bool AreNotEqual(<#=type#> value1, <#=type#> value2) => value1 != value2;
    }
<#
    }
#>
}
