<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
    var snames    = new []{ "SByte", "Int16",  "Int32",  "Int64"};
    var unames    = new []{ "Byte",  "UInt16", "UInt32", "UInt64" };
    var signeds   = new []{ "sbyte", "short",  "int",    "long"};
    var unsigneds = new []{ "byte",  "ushort", "uint",   "ulong"};
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Opportunity.UWP.Converters.XBind
{
<#
    for(var i = 0; i < snames.Length; i++)
    {
        var sname = snames[i];
        var uname = unames[i];
        var signed = signeds[i];
        var unsigned = unsigneds[i];

        for (var j = 0; j < 2; j++)
        {
            var name = j == 0 ? sname : uname;
            var type = j == 0 ? signed : unsigned;
#>
    /// <summary>
    /// Method of <see cref="<#=type#>"/> conversion.
    /// </summary>
    public static partial class <#=name#>
    {
        /// <summary>
        /// Add 1 to <paramref name="value"/>.
        /// </summary>
        public static <#=type#> Increase(<#=type#> value) => (<#=type#>)(value + 1);
        /// <summary>
        /// Subtract 1 from <paramref name="value"/>.
        /// </summary>
        public static <#=type#> Decrease(<#=type#> value) => (<#=type#>)(value - 1);
        
        /// <summary>
        /// Add <paramref name="addition"/> to <paramref name="value"/> and to string.
        /// </summary>
        public static string AddToString(<#=type#> value, <#=signed#> addition) => Add(value, addition).ToString();
        /// <summary>
        /// Subtract <paramref name="subtraction"/> from <paramref name="value"/> and to string.
        /// </summary>
        public static string SubtractToString(<#=type#> value, <#=signed#> subtraction) => Subtract(value, subtraction).ToString();
        /// <summary>
        /// Add 1 to <paramref name="value"/> and to string.
        /// </summary>
        public static string IncreaseToString(<#=type#> value) => Increase(value).ToString();
        /// <summary>
        /// Subtract 1 from <paramref name="value"/> and to string.
        /// </summary>
        public static string DecreaseToString(<#=type#> value) => Decrease(value).ToString();
        
        /// <summary>
        /// Test <paramref name="value"/> is 0 or not.
        /// </summary>
        public static bool IsZero(<#=type#> value) => value == 0;
        /// <summary>
        /// Test <paramref name="value"/> is 0 or not.
        /// </summary>
        public static bool IsNotZero(<#=type#> value) => value != 0;
        /// <summary>
        /// Test <paramref name="value1"/> equals <paramref name="value2"/> or not.
        /// </summary>
        public static bool AreEqual(<#=type#> value1, <#=type#> value2) => value1 == value2;
        /// <summary>
        /// Test <paramref name="value1"/> equals <paramref name="value2"/> or not.
        /// </summary>
        public static bool AreNotEqual(<#=type#> value1, <#=type#> value2) => value1 != value2;
    }

<#
        }
#>
    public static partial class <#=sname#>
    {
        /// <summary>
        /// Add <paramref name="addition"/> to <paramref name="value"/>.
        /// </summary>
        public static <#=signed#> Add(<#=signed#> value, <#=signed#> addition) => (<#=signed#>)(value + addition);
        /// <summary>
        /// Subtract <paramref name="subtraction"/> from <paramref name="value"/>.
        /// </summary>
        public static <#=signed#> Subtract(<#=signed#> value, <#=signed#> subtraction) => (<#=signed#>)(value - subtraction);
    }

    public static partial class <#=uname#>
    {
        /// <summary>
        /// Add <paramref name="addition"/> to <paramref name="value"/>.
        /// </summary>
        public static <#=unsigned#> Add(<#=unsigned#> value, <#=signed#> addition)
        {
            if (addition >= 0)
                return (<#=unsigned#>)(value + (<#=unsigned#>)addition);
            else
                return (<#=unsigned#>)(value - (<#=unsigned#>)(-addition));
        }
        /// <summary>
        /// Subtract <paramref name="subtraction"/> from <paramref name="value"/>.
        /// </summary>
        public static <#=unsigned#> Subtract(<#=unsigned#> value, <#=signed#> subtraction)
        {
            if (subtraction >= 0)
                return (<#=unsigned#>)(value - (<#=unsigned#>)subtraction);
            else
                return (<#=unsigned#>)(value + (<#=unsigned#>)(-subtraction));
        }
    }
<#
    }
#>
}
